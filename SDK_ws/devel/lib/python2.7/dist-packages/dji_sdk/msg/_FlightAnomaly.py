# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_sdk/FlightAnomaly.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FlightAnomaly(genpy.Message):
  _md5sum = "098979ec2b2d91dd43226500118b8680"
  _type = "dji_sdk/FlightAnomaly"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Here is an example how to use FlightAnomaly msg:
#
# void flightAnomalyCallback(const dji_sdk::FlightAnomaly::ConstPtr & msg)
# {
#   uint32_t flightAnomalyData = msg->data;
#   if(flightAnomalyData)
#   {
#     ROS_INFO("Flight Anomaly Reported by Flight Controller. Here are details:");
#     if(flightAnomalyData && dji_sdk::FlightAnomaly::COMPASS_INSTALLATION_ERROR)
#     {
#         ROS_INFO("COMPASS_INSTALLATION_ERROR");
#     }
#
#     if(flightAnomalyData && dji_sdk::FlightAnomaly::IMU_INSTALLATION_ERROR)
#     {
#         ROS_INFO("IMU_INSTALLATION_ERROR");
#     }
#
#     // etc...
#   }
# }
#
#

# constants for anomaly details
uint32 IMPACT_IN_AIR              = 1     #
uint32 RANDOM_FLY                 = 2     #
uint32 VERTICAL_CONTROL_FAIL      = 4     #
uint32 HORIZONTAL_CONTROL_FAIL    = 8     #
uint32 YAW_CONTROL_FAIL           = 16    #
uint32 AIRCRAFT_IS_FALLING        = 32    #
uint32 STRONG_WIND_LEVEL1         = 64    #
uint32 STRONG_WIND_LEVEL2         = 128   #
uint32 COMPASS_INSTALLATION_ERROR = 256   #
uint32 IMU_INSTALLATION_ERROR     = 512   #
uint32 ESC_TEMPERATURE_HIGH       = 1024  #
uint32 ESC_DISCONNECTED           = 2048  #
uint32 GPS_YAW_ERROR              = 4096  #

#
uint32 data

"""
  # Pseudo-constants
  IMPACT_IN_AIR = 1
  RANDOM_FLY = 2
  VERTICAL_CONTROL_FAIL = 4
  HORIZONTAL_CONTROL_FAIL = 8
  YAW_CONTROL_FAIL = 16
  AIRCRAFT_IS_FALLING = 32
  STRONG_WIND_LEVEL1 = 64
  STRONG_WIND_LEVEL2 = 128
  COMPASS_INSTALLATION_ERROR = 256
  IMU_INSTALLATION_ERROR = 512
  ESC_TEMPERATURE_HIGH = 1024
  ESC_DISCONNECTED = 2048
  GPS_YAW_ERROR = 4096

  __slots__ = ['data']
  _slot_types = ['uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FlightAnomaly, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.data is None:
        self.data = 0
    else:
      self.data = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_I().pack(self.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.data,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_I().pack(self.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.data,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
