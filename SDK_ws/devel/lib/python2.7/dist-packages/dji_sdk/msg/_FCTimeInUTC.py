# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_sdk/FCTimeInUTC.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class FCTimeInUTC(genpy.Message):
  _md5sum = "46bad377c3e8bc271c70f3dffa21d6ab"
  _type = "dji_sdk/FCTimeInUTC"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# the time stamp of getting this data in the ROS system
time stamp

# the time stamp in FC
uint32 fc_timestamp_us
uint32 fc_utc_yymmdd
uint32 fc_utc_hhmmss
"""
  __slots__ = ['stamp','fc_timestamp_us','fc_utc_yymmdd','fc_utc_hhmmss']
  _slot_types = ['time','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,fc_timestamp_us,fc_utc_yymmdd,fc_utc_hhmmss

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FCTimeInUTC, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.fc_timestamp_us is None:
        self.fc_timestamp_us = 0
      if self.fc_utc_yymmdd is None:
        self.fc_utc_yymmdd = 0
      if self.fc_utc_hhmmss is None:
        self.fc_utc_hhmmss = 0
    else:
      self.stamp = genpy.Time()
      self.fc_timestamp_us = 0
      self.fc_utc_yymmdd = 0
      self.fc_utc_hhmmss = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5I().pack(_x.stamp.secs, _x.stamp.nsecs, _x.fc_timestamp_us, _x.fc_utc_yymmdd, _x.fc_utc_hhmmss))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.stamp.secs, _x.stamp.nsecs, _x.fc_timestamp_us, _x.fc_utc_yymmdd, _x.fc_utc_hhmmss,) = _get_struct_5I().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5I().pack(_x.stamp.secs, _x.stamp.nsecs, _x.fc_timestamp_us, _x.fc_utc_yymmdd, _x.fc_utc_hhmmss))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.stamp.secs, _x.stamp.nsecs, _x.fc_timestamp_us, _x.fc_utc_yymmdd, _x.fc_utc_hhmmss,) = _get_struct_5I().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5I = None
def _get_struct_5I():
    global _struct_5I
    if _struct_5I is None:
        _struct_5I = struct.Struct("<5I")
    return _struct_5I
